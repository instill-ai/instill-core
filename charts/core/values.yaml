## -- Provide a name in place of vdp
nameOverride: ""
## -- Override the deployment namespace
namespaceOverride: ""
## -- Provide a name to substitute for the full names of resources
fullnameOverride: ""
# -- The update strategy for deployments with persistent volumes: "RollingUpdate" or "Recreate"
# Set it as "Recreate" when "RWM" for volumes isn't supported
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
# -- Logging level: debug, info, warning, error or fatal
logLevel: info
# -- Enable development mode
# if edition is "k8s-ce:dev", console will be launched with CODE_ENV=development. Otherwise, CODE_ENV=production
edition: k8s-ce
# -- The maximum data payload to Model cluster (MB)
maxDataSizeMB: 32
# -- Set true to enable integration test mode
# The model-backend will use dummy models
# The mgmt-backend will set a mock up customer_id
itMode:
  enabled: false
# -- Use this set to assign a list of default pullSecrets
imagePullSecrets:
expose:
  # -- Set how to expose the api-gateway service. Set the type as "ingress", "clusterIP", "nodePort" or "loadBalancer"
  # and fill the information in the corresponding section
  type: clusterIP
  tls:
    # Enable TLS or not.
    enabled: true
    # The source of the tls certificate. Set as "auto", "secret"
    # or "none" and fill the information in the corresponding section
    # 1) auto: generate the tls certificate automatically
    # 2) secret: read the tls certificate from the specified secret.
    # The tls certificate can be generated manually or by cert manager
    # 3) none: configure no tls certificate for the ingress. If the default
    # tls certificate is configured in the ingress controller, choose this option
    certSource: auto
    auto:
      # The common name used to generate the certificate, it's necessary
      # when the type isn't "ingress"
      commonName: ""
    secret:
      # The name of secret which contains keys named:
      # "tls.crt" - the certificate
      # "tls.key" - the private key
      secretName: ""
  ingress:
    hosts:
      apiGateway: api.instill.tech
    # set to the type of ingress controller if it has specific requirements.
    # leave as `default` for most ingress controllers.
    # set to `gce` if using the GCE ingress controller
    controller: default
    ## Allow .Capabilities.KubeVersion.Version to be overridden while creating ingress
    kubeVersionOverride: ""
    className: ""
    # Annotations on the Ingress
    annotations: {}
  clusterIP:
    ports:
      # The service port api-gateway http listens on
      apiGatewayHttp:
      # The service port api-gateway stats listens on
      apiGatewayStats:
      # The service port api-gateway metrics listens on
      apiGatewayMetrics:
      # The service port console web listens on
      console:
      # The service port temporal web listens on
      temporal:
    # Annotations on the ClusterIP service
    annotations: {}
  nodePort:
    ports:
      apiGatewayHttp:
        # The service port api-gateway http listens on
        port:
        # The node port api-gateway listens on
        nodePort: 30010
      apiGatewayStats:
        # The service port api-gateway stats listens
        port:
        # The node port api-gateway stats listens on
        nodePort: 30011
      apiGatewayMetrics:
        # The service port api-gateway metrics listens on
        port:
        # The node port api-gateway metrics listens on
        nodePort: 30012
      console:
        # The service port console web listens on
        port:
        # The node port console web listens on
        nodePort: 30020
      temporal:
        # The service port temporal web listens on
        port:
        # The node port temporal web listens on
        nodePort: 30030
    # Annotations on the NodePort service
    annotations: {}
  loadBalancer:
    # Set the IP if the LoadBalancer supports assigning IP
    IP: ""
    sourceRanges: []
    ports:
      # The service port api-gateway http listens on
      apiGatewayHttp:
      # The service port api-gateway stats listens on
      apiGatewayStats:
      # The service port api-gateway metrics listens on
      apiGatewayMetrics:
      # The service port console web listens on
      console:
      # The service port temporal web listens on
      temporal:
    # Annotations on the LoadBalancer service
    annotations: {}
# -- The external URL for Instill Core services. It is used to
# populate the API endpoints showed on the console
#
# Format: protocol://domain[:port]. Usually:
# 1) if "expose.type" is "ingress", the "domain" should be
# the value of "expose.ingress.hosts.gateway"
# 2) if "expose.type" is "clusterIP", the "domain" should be
# the value of "expose.clusterIP.name"
# 3) if "expose.type" is "nodePort", the "domain" should be
# the IP address of Kubernetes node
#
# If Instill Core is deployed behind the proxy, set it as the URL of the proxy (without protocol and port)
apiGatewayURL: http://localhost:8080
consoleURL: http://localhost:3000
# -- The internal TLS used for Core components secure communicating. In order to enable https
# in each components tls cert files need to provided in advance.
internalTLS:
  # If internal TLS enabled
  enabled: false
  # There are three ways to provide tls
  # 1) "auto" will generate cert automatically
  # 2) "manual" need provide cert file manually in following value
  # 3) "secret" internal certificates from secret
  certSource: "auto"
  # The content of trust ca, only available when `certSource` is "manual"
  trustCa: ""
  # api-gateway related cert configuration
  apiGateway:
    # secret name for api-gateway's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of api-gateway's TLS cert file, only available when `certSource` is "manual"
    crt: ""
    # Content of api-gateway's TLS key file, only available when `certSource` is "manual"
    key: ""
  # mgmt-backend related cert configuration
  mgmtBackend:
    # secret name for mgmt-backend's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of mgmt-backend's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of mgmt-backend's TLS key file, only available when `certSource` is "manual"
    key: ""
  # pipeline-backend related cert configuration
  pipeline-backend:
    # secret name for pipeline-backend's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of pipeline-backend's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of pipeline-backend's TLS key file, only available when `certSource` is "manual"
    key: ""
  # model-backend related cert configuration
  modelBackend:
    # secret name for model-backend's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of model-backend's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of model-backend's TLS key file, only available when `certSource` is "manual"
    key: ""
  # console related cert configuration
  console:
    # secret name for console's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of console's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of console's TLS key file, only available when `certSource` is "manual"
    key: ""
  # ray related cert configuration
  ray:
    # secret name for ray's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of ray's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of ray's TLS key file, only available when `certSource` is "manual"
    key: ""
# -- The persistence is enabled by default and a default StorageClass
# is needed in the k8s cluster to provision volumes dynamically.
# Specify another StorageClass in the "storageClass" or set "existingClaim"
# if you already have existing persistent volumes to use
persistence:
  enabled: true
  # Setting it to "keep" to avoid removing PVCs during a helm delete
  # operation. Leaving it empty will delete PVCs after the chart deleted
  # (this does not apply for PVCs that are created for internal database
  # and redis components, i.e. they are never deleted automatically)
  resourcePolicy: "keep"
  persistentVolumeClaim:
    # If external database is used, the following settings for database will be ignored
    database:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 128Mi
      annotations: {}
    # If external Redis is used, the following settings for Redis will be ignored
    redis:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 128Mi
      annotations: {}
    registry:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 250Gi
      annotations: {}
# -- The usage collector configuration
usage:
  usageidentifieruid:
  enabled: true
  tlsenabled: true
  host: usage.instill.tech
  port: 443
# -- The configuration of api-gateway
apiGateway:
  # -- The image of api-gateway
  image:
    repository: instill/api-gateway
    tag: 0.12.0-beta
    pullPolicy: IfNotPresent
  # -- The path of configuration file for api-gateway
  configPath: /api-gateway/config/.env
  # -- The TLS configuration for api-gateway
  tls:
    enabled: false
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for api-gateway
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volume
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
# -- The configuration of mgmt-backend
mgmtBackend:
  # -- The image of mgmt-backend
  image:
    repository: instill/mgmt-backend
    tag: 0.13.0-beta
    pullPolicy: IfNotPresent
  # -- The command names to be executed
  commandName:
    migration: mgmt-backend-migrate
    init: mgmt-backend-init
    main: mgmt-backend
    worker: mgmt-backend-worker
  # -- The path of configuration file for mgmt-backend
  configPath: /mgmt-backend/config/config.yaml
  # -- The database migration version
  dbVersion: 5
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for mgmt-backend
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  # -- The pod resource
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  # -- The configuration of Temporal Cloud
  temporal:
    hostPort:
    namespace:
    ca:
    cert:
    key:
    serverName:
# -- The configuration of pipeline-backend
pipelineBackend:
  # -- The image of pipeline-backend
  image:
    repository: instill/pipeline-backend
    tag: 0.26.0-beta
    pullPolicy: IfNotPresent
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    migration: pipeline-backend-migrate
    init: pipeline-backend-init
    main: pipeline-backend
    worker: pipeline-backend-worker
  # -- The path of configuration file for pipeline-backend
  configPath: /pipeline-backend/config/config.yaml
  # -- The database migration version
  dbVersion: 12
  # -- workflow setting
  workflow:
    maxWorkflowTimeout: 3600 # in seconds
    maxWorkflowRetry: 3
    maxActivityRetry: 1
  # -- Load the pre-built connector or not
  prebuiltConnectorEnabled: false
  excludelocalconnector: false
  useStaticModelList: false
  # -- The configuration of Temporal Cloud
  temporal:
    hostPort:
    namespace:
    ca:
    cert:
    key:
    serverName:
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for pipeline-backend
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  containers:
    pipelineBackend:
      resources: {}
    pipelineBackendWorker:
      resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  copyHostDocker: false
  modelBackendHostOverride:
  modelBackendPortOverride:
# -- The configuration of model-backend
modelBackend:
  # -- The image of model-backend
  image:
    repository: instill/model-backend
    tag: 0.23.0-alpha
    pullPolicy: IfNotPresent
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    migration: model-backend-migrate
    init: model-backend-init
    worker: model-backend-worker
    main: model-backend
    initModel: model-backend-init-model
  # -- The path of configuration file for model-backend
  configPath: /model-backend/config/config.yaml
  # -- The database migration version
  dbVersion: 5
  # -- The configuration of Temporal Cloud
  temporal:
    hostPort:
    namespace:
    retention:
    ca:
    cert:
    key:
    serverName:
    workflow:
      maxWorkflowTimeout: 3600 # in seconds
      maxWorkflowRetry: 3
      maxActivityRetry: 1
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for model-backend
  replicaCount: 1
  # -- The model initialization configuration
  initModel:
    ownertype: users
    ownerid: admin
    enabled: false
    path: https://raw.githubusercontent.com/instill-ai/model/main/model-hub/model_hub_cpu.json
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
# -- The configuration of artifact-backend
artifactBackend:
  # -- The image of artifact-backend
  image:
    repository: instill/artifact-backend
    tag: 0.2.1-alpha
    pullPolicy: IfNotPresent
  # -- The command names to be executed
  commandName:
    migration: artifact-backend-migrate
    main: artifact-backend
    worker: artifact-backend-worker
  # -- The path of configuration file for artifact-backend
  configPath: /artifact-backend/config/config.yaml
  # -- The database migration version
  dbVersion: 1
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for artifact-backend
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  # -- The pod resource
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  # -- The configuration of Temporal Cloud
  temporal:
    hostPort:
    namespace:
    ca:
    cert:
    key:
    serverName:
# -- The configuration of console
console:
  # -- Enable console deployment or not
  enabled: true
  # -- The image of console
  image:
    repository: instill/console
    tag: 0.43.0-beta
    pullPolicy: IfNotPresent
  # -- The accessible endpoint for the api-gateway from the console server side
  serverApiGatewayURL:
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for console
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volume
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
# -- The configuration of KubeRay Operator
kuberay-operator:
  fullnameOverride: ""
  watchNamespace:
    - "instill-ai"
# -- The configuration of Ray
rayService:
  vram:
  spec:
    autoscalerOptions:
      resources:
        limits:
          cpu: "500m"
          memory: "512Mi"
        requests:
          cpu: "500m"
          memory: "512Mi"
  image:
    repository: instill/ray
    version: "2.9.3"
    tag: 0.3.0-alpha
    pullPolicy: IfNotPresent
  headGroupSpec:
    resources:
      limits:
        cpu: "0"
        memory: "4Gi"
        nvidia.com/gpu: 0
      requests:
        cpu: "0"
        memory: "4Gi"
        nvidia.com/gpu: 0
    affinity: {}
    nodeSelector: {}
  workerGroupSpecs:
    - replicas: 1
      minReplicas: 1
      maxReplicas: 1
      groupName: "cpu-group"
      gpuWorkerGroup:
        enabled: false
        # https://github.com/ray-project/ray/blob/master/python/ray/autoscaler/kuberay/ray-cluster.complete.yaml#L39
        customResource: # "'\"{\\\"3060\\\": 1}\"'"
        resources:
          limits:
            cpu: "2"
            memory: "8Gi"
            nvidia.com/gpu: 1
          requests:
            cpu: "2"
            memory: "8Gi"
            nvidia.com/gpu: 1
      resources:
        limits:
          cpu: "2"
          memory: "8Gi"
        requests:
          cpu: "2"
          memory: "8Gi"
      affinity: {}
      nodeSelector: {}
      # add more worker groups under here
# -- The configuration of Temporal
temporal:
  # -- Enable Temporal deployment or not
  enabled: true
  server:
    # -- Enable Temporal server
    enabled: true
    # -- The image of Temporal server
    image:
      repository: temporalio/server
      tag: 1.22.3
      pullPolicy: IfNotPresent
    dynamicConfig: {}
    # matching.numTaskqueueReadPartitions:
    #   - value: 5
    #     constraints: {}
    # matching.numTaskqueueWritePartitions:
    #   - value: 5
    #     constraints: {}

    config:
      logLevel: "debug,info"
      # IMPORTANT: This value cannot be changed, once it's set.
      numHistoryShards: 512
      persistence:
        defaultStore: default
        additionalStores: {}
        default:
          driver: "sql"
          sql:
            driver: "postgres"
            host:
            port: 5432
            database: "temporal"
            existingSecret: ""
            secretName: ""
            maxConns: 20
            maxConnLifetime: "1h"
            # connectAttributes:
            # tx_isolation: 'READ-COMMITTED'
        visibility:
          driver: "sql"
          sql:
            driver: "postgres"
            host:
            port: 5432
            database: "temporal_visibility"
            existingSecret: ""
            secretName: ""
            maxConns: 20
            maxConnLifetime: "1h"
            # connectAttributes:
            #   tx_isolation: 'READ-COMMITTED'
    metrics:
      # Annotate pods directly with Prometheus annotations.
      # Use this if you installed Prometheus from a Helm chart.
      annotations:
        enabled: true
      # Enable Prometheus ServiceMonitor
      # Use this if you installed the Prometheus Operator (https://github.com/coreos/prometheus-operator).
      serviceMonitor:
        enabled: false
        interval: 30s
        # Set additional lables to all the ServiceMonitor resources
        additionalLabels: {}
        #  label1: value1
        #  label2: value2
        # Set Prometheus metric_relabel_configs via ServiceMonitor
        # Use metricRelabelings to adjust metric and label names as needed
        metricRelabelings: []
        # - action: replace
        #   sourceLabels:
        #   - exported_namespace
        #   targetLabel: temporal_namespace
        # - action: replace
        #   regex: service_errors_(.+)
        #   replacement: ${1}
        #   sourceLabels:
        #   - __name__
        #   targetLabel: temporal_error_kind
        # - action: replace
        #   regex: service_errors_.+
        #   replacement: temporal_service_errors
        #   sourceLabels:
        #   - __name__
        #   targetLabel: __name__
      prometheus:
        timerType: histogram
    frontend:
      replicaCount: 1
      service:
        annotations: {}
        type: ClusterIP
        port: 7233
      metrics:
        annotations:
          enabled: true
        serviceMonitor: {}
        # enabled: false
        prometheus: {}
        # timerType: histogram
      podAnnotations: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      autoscaling:
        enabled: false
        minReplicas:
        maxReplicas:
        targetCPUUtilizationPercentage:
        targetMemoryUtilizationPercentage:
      podDisruptionBudget:
        enabled: false
        spec:
          minAvailable:
          maxUnavailable:
    history:
      replicaCount: 1
      service:
        # type: ClusterIP
        port: 7234
      metrics:
        annotations:
          enabled: true
        serviceMonitor: {}
        # enabled: false
        prometheus: {}
        # timerType: histogram
      podAnnotations: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      autoscaling:
        enabled: false
        minReplicas:
        maxReplicas:
        targetCPUUtilizationPercentage:
        targetMemoryUtilizationPercentage:
      podDisruptionBudget:
        enabled: false
        spec:
          minAvailable:
          maxUnavailable:
    matching:
      replicaCount: 1
      service:
        # type: ClusterIP
        port: 7235
      metrics:
        annotations:
          enabled: false
        serviceMonitor: {}
        # enabled: false
        prometheus: {}
        # timerType: histogram
      podAnnotations: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      autoscaling:
        enabled: false
        minReplicas:
        maxReplicas:
        targetCPUUtilizationPercentage:
        targetMemoryUtilizationPercentage:
      podDisruptionBudget:
        enabled: false
        spec:
          minAvailable:
          maxUnavailable:
    worker:
      replicaCount: 1
      service:
        # type: ClusterIP
        port: 7239
      metrics:
        annotations:
          enabled: true
        serviceMonitor: {}
        # enabled: false
        prometheus: {}
        # timerType: histogram
      podAnnotations: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      autoscaling:
        enabled: false
        minReplicas:
        maxReplicas:
        targetCPUUtilizationPercentage:
        targetMemoryUtilizationPercentage:
      podDisruptionBudget:
        enabled: false
        spec:
          minAvailable:
          maxUnavailable:
    # -- Set the service account to be used, default if left empty
    serviceAccountName: ""
    # -- Mount the service account token
    automountServiceAccountToken: false
    # -- Add extra env variables
    extraEnv: []
    # -- Mount external volumes
    # For example, mount a secret containing Certificate root CA to verify database
    # TLS connection.
    extraVolumes: []
    # - name: my-volume
    #   secret:
    #     secretName: my-secret
    extraVolumeMounts: []
    # - name: my-volume
    #   mountPath: /etc/secrets/my-secret
    #   readOnly: true
    # -- Add extra init containers
    extraInitContainers: []
    # extraInitContainers:
    #  - name: ...
    #    image: ...
    # -- Add extra sidecar containers
    sidecarContainers: {}
    # -- Additional deployment annotations
    podAnnotations: {}
    # -- Additional service annotations
    serviceAnnotations: {}
    # -- The pod resource
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
  admintools:
    # -- Enable Temporal admin-tools
    enabled: true
    # -- The image of Temporal admin-tools
    image:
      repository: temporalio/admin-tools
      tag: 1.22.3
      pullPolicy: IfNotPresent
    # -- Set the service account to be used, default if left empty
    serviceAccountName: ""
    # -- Mount the service account token
    automountServiceAccountToken: false
    # -- The number of replica for temporal admin-tools
    replicaCount: 1
    # -- The pod resource
    resources: {}
    ## -- The priority class to run the pod as
    priorityClassName:
    # -- Additional deployment annotations
    podAnnotations: {}
    # -- Additional service annotations
    serviceAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
  ui:
    # -- Enable Temporal UI
    enabled: true
    # -- The image of Temporal UI
    image:
      repository: temporalio/ui
      tag: 2.9.0
      pullPolicy: IfNotPresent
    # -- Set the service account to be used, default if left empty
    serviceAccountName: ""
    # -- Mount the service account token
    automountServiceAccountToken: false
    # -- The number of replica for temporal ui
    replicaCount: 1
    # -- The pod resource
    resources: {}
    ## -- The priority class to run the pod as
    priorityClassName:
    # -- Additional deployment annotations
    podAnnotations: {}
    # -- Additional service annotations
    serviceAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    config:
      # server/config.yml file content
      auth:
        enabled: false
      routing:
        default_to_namespace: default
        issue_report_link: https://github.com/temporalio/web/issues/new/choose # set this field if you need to direct people to internal support forums
  image:
    tag: 1.22.3
# -- The configuration of PostgreSQL
database:
  # -- If external database is used, set "enabled" to false
  # and fill the connection informations in "external" section
  enabled: true
  # -- The image of postgresql
  image:
    repository: postgres
    tag: 15-alpine
    pullPolicy: IfNotPresent
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The initial superuser password for internal database
  password: "password"
  # -- The size limit for Shared memory, pgSQL use it for shared_buffer
  shmSizeLimit: 512Mi
  # -- The pod resource
  resources: {}
  # -- The timeout used in livenessProbe; 1 to 5 seconds
  livenessProbe:
    timeoutSeconds: 1
  # -- The timeout used in readinessProbe; 1 to 5 seconds
  readinessProbe:
    timeoutSeconds: 1
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # -- The maximum number of connections in the idle connection pool per pod.
  # If it <=0, no idle connections are retained.
  maxIdleConns: 5
  # -- The maximum number of open connections to the database per pod.
  # If it <= 0, then there is no limit on the number of open connections.
  maxOpenConns: 10
  # -- The maximum amount of time in minutes a connection may be reused.
  # Expired connections may be closed lazily before reuse.
  # If it <= 0, connections are not closed due to a connection's age.
  maxConnLifeTime: 30m
  # -- The configuration of external database
  external:
    host:
    port:
    username:
    password:
  external_replica:
    host:
    port:
    username:
    password:
# -- The configuration of Redis
redis:
  # -- If external Redis is used, set "enabled" to false
  # and fill the connection information in "external" section
  enabled: true
  # -- The image of redis
  image:
    repository: redis
    tag: 7.0-alpine3.16
    pullPolicy: IfNotPresent
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The pod resource
  resources: {}
  ## -- The priority class to run the pod as
  priorityClassName:
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## -- The configuration of external redis
  external:
    # -- Address for redis: <host_redis>:<port_redis>
    addr:
# -- The configuration of Elasticsearch
elasticsearch:
  # -- If external Elasticsearch is used, set "enabled" to false
  # and fill the connection information in "external" section
  enabled: true
  clusterName: core-elasticsearch
  replicas: 1
  version: v7
  protocol: http
  httpPort: 9200
  createCert: false
  visibilityIndex: "temporal_visibility_v1_dev"
  extraEnvs:
    - name: ELASTIC_PASSWORD
      value: "password"
  persistence:
    enabled: false
  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: false
  ## -- The configuration of external Elasticsearch
  external:
# -- The configuration of InfluxDB Cloud
influxdbCloud:
  url: "http://core-influxdb2:8086"
  token: "i-love-instill-ai"
  organization: "instill-ai"
  bucket: "instill-ai"
# -- The configuration of InfluxDB 2
influxdb2:
  enabled: true
  service:
    port: 8086
  adminUser:
    organization: "instill-ai"
    bucket: "krakend"
    retention_policy: "1w"
    user: "admin"
    password: "password"
    token: "i-love-instill-ai"
  env:
    - name: DOCKER_INFLUXDB_BUCKET_VDP
      value: instill-ai
  initScripts:
    enabled: true
    scripts:
      init.sh: |
        #!/bin/bash
        BUCKET_ID=$(influx bucket list | grep "$DOCKER_INFLUXDB_INIT_BUCKET" | awk '{print $1}')
        influx v1 dbrp create --db ${DOCKER_INFLUXDB_INIT_BUCKET} --rp ${DOCKER_INFLUXDB_INIT_RETENTION} --bucket-id ${BUCKET_ID} --default
        influx v1 auth create --username ${DOCKER_INFLUXDB_INIT_USERNAME} --password ${DOCKER_INFLUXDB_INIT_PASSWORD} --write-bucket ${BUCKET_ID} --org ${DOCKER_INFLUXDB_INIT_ORG}
        influx bucket create --name ${DOCKER_INFLUXDB_BUCKET_VDP} --org ${DOCKER_INFLUXDB_INIT_ORG} --token ${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN} --retention ${DOCKER_INFLUXDB_INIT_RETENTION}
# -- The configuration of Jaeger
jaeger:
  provisionDataStore:
    cassandra: false
  storage:
    type: elasticsearch
    elasticsearch:
      host: core-elasticsearch-master
      port: 9200
      user: elastic
      password: password
  collector:
    initContainers:
      - name: wait-for-elasticsearch
        image: curlimages/curl:8.00.1
        command: ["sh", "-c"]
        args:
          - >
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://core-elasticsearch-master:9200)" != "200" ]]; do echo waiting for elasticsearch; sleep 1; done

# -- The configuration of OpenTelemetry Collector
opentelemetry-collector:
  mode: deployment
  ports:
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    otlp-http:
      enabled: false
    otlp:
      enabled: true
      containerPort: 8095
      servicePort: 8095
    metrics:
      enabled: true
      containerPort: 9001
      servicePort: 9001
      protocol: TCP
  config:
    receivers:
      jaeger: {}
      prometheus: {}
      zipkin: {}
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:8095
    processors:
      memory_limiter:
        limit_percentage: 50
        check_interval: 1s
        spike_limit_percentage: 30
      batch:
        send_batch_size: 8192
    exporters:
      logging: {} # aka, stdOut/stdErr
      jaeger:
        endpoint: core-jaeger-collector:14250
        tls:
          insecure: true
      prometheus:
        endpoint: ${env:MY_POD_IP}:9001
        namespace: instill-ai
        send_timestamps: true
        enable_open_metrics: true
    service:
      pipelines:
        traces:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            - logging
            - jaeger
        metrics:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            - logging
            - prometheus
        logs:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            - logging
# -- The configuration of Prometheus Stack
kube-prometheus-stack:
  nameOverride: core
  fullnameOverride: core
  alertmanager:
    alertmanagerSpec:
      podMetadata:
        name: alertmanager
  grafana:
    enabled: false
  prometheus:
    prometheusSpec:
      podMetadata:
        name: prometheus
# -- The configuration of Grafana
grafana:
  grafana.ini:
    security:
      allow_embedding: true
    auth.anonymous:
      enabled: true
      org_role: Viewer
  adminPassword: password
  dashboards:
    default:
      krakend-dashboard:
        url: https://grafana.com/api/dashboards/17074/revisions/1/download
  dashboardsConfigMaps:
    ray: "dashboards"
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: "default"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          updateIntervalSeconds: 60
          options:
            path: /var/lib/grafana/dashboards/default
        - name: "ray"
          folder: Ray
          type: file
          options:
            path: /var/lib/grafana/dashboards/ray
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: "influx"
          type: "influxdb"
          access: "proxy"
          editable: true
          isDefault: true
          orgId: 1
          url: "http://core-influxdb2:8086"
          version: 1
          database: krakend
          basicAuth: false
          jsonData:
            defaultBucket: krakend
            httpMode: POST
            organization: instill-ai
            version: Flux
          secureJsonData:
            token: i-love-instill-ai
        - name: Prometheus
          url: http://core-prometheus:9090
          type: prometheus
          access: proxy
# -- The configuration of OpenFGA
openfga:
  image:
    repository: openfga/openfga
    tag: v1.5.1
    pullPolicy: IfNotPresent
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for mgmt-backend
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: {}
  # -- Additional deployment annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  # -- The pod resource
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
      # -- The configuration of registry
registry:
  enabled: true
  image:
    repository: registry
    tag: 2.8.3
    pullPolicy: IfNotPresent
  configPath: /etc/docker/registry/config.yml
  serviceAccountName: ""
  automountServiceAccountToken: false
  replicaCount: 1
  extraEnv: []
  extraVolumes: []
  extraVolumeMounts: []
  extraInitContainers: []
  sidecarContainers: {}
  podAnnotations: {}
  serviceAnnotations: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  garbageCollect:
    enabled: false
    deleteUntagged: true
    schedule: "@midnight"
  config:
    version: 0.1
    log:
      level: Info
      formatter: text
      fields:
        service: registry
        environment: k8s:ce
    storage:
      type: filesystem
      filesystem:
        rootdirectory: /var/lib/registry
        maxthreads: 100
      gcs:
        bucket:
        keyfile:
        credentials:
          type:
          project_id:
          private_key_id:
          private_key:
          client_email:
          client_id:
          auth_uri:
          token_uri:
          auth_provider_x509_cert_url:
          client_x509_cert_url:
        rootdirectory:
      delete:
        enabled: true
      redirect:
        disable: false
      cache:
        blobdescriptor: redis
        blobdescriptorsize: 10000
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
        readonly:
          enabled: false
    http:
      addr: 0.0.0.0:5000
      prefix: /
      secret: i-love-instill-ai
      relativeurls: false
      draintimeout: 60s
      debug:
        addr: 0.0.0.0:5001
        prometheus:
          enabled: true
          path: /metrics
      headers:
        X-Content-Type-Options: [nosniff]
      http2:
        disabled: false
      h2c:
        enabled: false
    redis:
      addr: core-redis:6379
      dialtimeout: 100ms
      readtimeout: 100ms
      writetimeout: 100ms
      pool:
        maxidle: 16
        maxactive: 128
        idletimeout: 300s
      tls:
        enabled: false
tags:
  model: true
  observability: true
  prometheusStack: false
