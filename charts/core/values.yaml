# -- Provide a name in place of core
nameOverride:
# -- Provide a name to substitute for the full names of resources
fullnameOverride:
# -- Override the deployment namespace
namespaceOverride:
# -- The update strategy for deployments with persistent volumes: "RollingUpdate" or "Recreate"
# Set it as "Recreate" when "RWM" for volumes isn't supported
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
# -- Set the cluster as the primary one in a multi-region environment.
isPrimaryCluster: true
# -- Logging level: debug, info, warning, error or fatal
logLevel: info
# -- Enable development mode
# if edition is "k8s-ce:dev", console will be launched with CODE_ENV=development. Otherwise, CODE_ENV=production
edition: k8s-ce
# -- The maximum data payload to backend services (MB)
maxDataSizeMB: 1024
# -- Use this set to assign a list of default pullSecrets
imagePullSecrets: []
# -- Set how to expose the api-gateway service
expose:
  # -- Set the type as "ingress", "clusterIP", "nodePort" or "loadBalancer"
  # and fill the information in the corresponding section
  type: clusterIP
  tls:
    # Enable TLS or not.
    enabled: true
    # The source of the tls certificate. Set as "auto", "secret"
    # or "none" and fill the information in the corresponding section
    # 1) auto: generate the tls certificate automatically
    # 2) secret: read the tls certificate from the specified secret.
    # The tls certificate can be generated manually or by cert manager
    # 3) none: configure no tls certificate for the ingress. If the default
    # tls certificate is configured in the ingress controller, choose this option
    certSource: auto
    auto:
      # The common name used to generate the certificate, it's necessary
      # when the type isn't "ingress"
      commonName: ""
    secret:
      # The name of secret which contains keys named:
      # "tls.crt" - the certificate
      # "tls.key" - the private key
      secretName: ""
  ingress:
    hosts:
      apiGateway: api.instill-ai.com
    # set to the type of ingress controller if it has specific requirements.
    # leave as `default` for most ingress controllers.
    # set to `gce` if using the GCE ingress controller
    controller: default
    ## Allow .Capabilities.KubeVersion.Version to be overridden while creating ingress
    kubeVersionOverride: ""
    className: ""
    # Annotations on the Ingress
    annotations: {}
  clusterIP:
    ports:
      # The service port api-gateway http listens on
      apiGatewayHttp:
      # The service port api-gateway stats listens on
      apiGatewayStats:
      # The service port api-gateway metrics listens on
      apiGatewayMetrics:
      # The service port console web listens on
      console:
      # The service port temporal web listens on
      temporal:
    # Annotations on the ClusterIP service
    annotations: {}
  nodePort:
    ports:
      apiGatewayHttp:
        # The service port api-gateway http listens on
        port:
        # The node port api-gateway listens on
        nodePort: 30010
      apiGatewayStats:
        # The service port api-gateway stats listens
        port:
        # The node port api-gateway stats listens on
        nodePort: 30011
      apiGatewayMetrics:
        # The service port api-gateway metrics listens on
        port:
        # The node port api-gateway metrics listens on
        nodePort: 30012
      console:
        # The service port console web listens on
        port:
        # The node port console web listens on
        nodePort: 30020
      temporal:
        # The service port temporal web listens on
        port:
        # The node port temporal web listens on
        nodePort: 30030
    # Annotations on the NodePort service
    annotations: {}
  loadBalancer:
    # Set the IP if the LoadBalancer supports assigning IP
    IP: ""
    sourceRanges: []
    ports:
      # The service port api-gateway http listens on
      apiGatewayHttp:
      # The service port api-gateway stats listens on
      apiGatewayStats:
      # The service port api-gateway metrics listens on
      apiGatewayMetrics:
      # The service port console web listens on
      console:
    # Annotations on the LoadBalancer service
    annotations: {}
# -- The external URL for Instill Core services. It is used to
# populate the API endpoints showed on the console
#
# Format: protocol://domain[:port]. Usually:
# 1) if "expose.type" is "ingress", the "domain" should be
# the value of "expose.ingress.hosts.gateway"
# 2) if "expose.type" is "clusterIP", the "domain" should be
# the value of "expose.clusterIP.name"
# 3) if "expose.type" is "nodePort", the "domain" should be
# the IP address of Kubernetes node
#
# If Instill Core is deployed behind a proxy, set it as the URL of the proxy (without protocol and port)
apiGatewayURL: http://localhost:8080
consoleURL: http://localhost:3000
# -- The internal TLS used for Core components secure communicating. In order to enable https
# in each components tls cert files need to provided in advance.
internalTLS:
  # If internal TLS enabled
  enabled: false
  # There are three ways to provide tls
  # 1) "auto" will generate cert automatically
  # 2) "manual" need provide cert file manually in following value
  # 3) "secret" internal certificates from secret
  certSource: "auto"
  # The content of trust ca, only available when `certSource` is "manual"
  trustCa: ""
  # api-gateway related cert configuration
  apiGateway:
    # secret name for api-gateway's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of api-gateway's TLS cert file, only available when `certSource` is "manual"
    crt: ""
    # Content of api-gateway's TLS key file, only available when `certSource` is "manual"
    key: ""
  # mgmt-backend related cert configuration
  mgmtBackend:
    # secret name for mgmt-backend's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of mgmt-backend's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of mgmt-backend's TLS key file, only available when `certSource` is "manual"
    key: ""
  # pipeline-backend related cert configuration
  pipeline-backend:
    # secret name for pipeline-backend's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of pipeline-backend's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of pipeline-backend's TLS key file, only available when `certSource` is "manual"
    key: ""
  # model-backend related cert configuration
  modelBackend:
    # secret name for model-backend's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of model-backend's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of model-backend's TLS key file, only available when `certSource` is "manual"
    key: ""
  # console related cert configuration
  console:
    # secret name for console's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of console's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of console's TLS key file, only available when `certSource` is "manual"
    key: ""
  # ray related cert configuration
  ray:
    # secret name for ray's tls certs, only available when `certSource` is "secret"
    secretName: ""
    # Content of ray's TLS key file, only available when `certSource` is "manual"
    crt: ""
    # Content of ray's TLS key file, only available when `certSource` is "manual"
    key: ""
# -- The persistence is enabled by default and a default StorageClass
# is needed in the k8s cluster to provision volumes dynamically.
# Specify another StorageClass in the "storageClass" or set "existingClaim"
# if you already have existing persistent volumes to use
persistence:
  enabled: true
  # Setting it to "keep" to avoid removing PVCs during a helm delete
  # operation. Leaving it empty will delete PVCs after the chart deleted
  # (this does not apply for PVCs that are created for internal database
  # and redis components, i.e. they are never deleted automatically)
  resourcePolicy: "keep"
  persistentVolumeClaim:
    # If external database is used, the following settings for database will be ignored
    database:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 128Mi
      annotations: {}
    # If external Redis is used, the following settings for Redis will be ignored
    redis:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 128Mi
      annotations: {}
    registry:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 250Gi
      annotations: {}
# -- The usage collector configuration
usage:
  usageidentifieruid:
  enabled: true
  tlsenabled: true
  host: usage.instill-ai.com
  port: 443
# -- The configuration of api-gateway
apiGateway:
  # -- The image of api-gateway
  image:
    repository: instill/api-gateway
    tag: 4e26462
    pullPolicy: IfNotPresent
  # -- Annotation for deployment
  annotations: {}
  # -- The path of configuration file for api-gateway
  configPath: /api-gateway/config/.env
  # -- Additional hosts
  additionalHosts: []
  # -- The TLS configuration for api-gateway
  tls:
    enabled: false
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for api-gateway
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volume
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init first containers
  extraInitFirstContainers: []
  # extraInitFirstContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: []
  # -- Additional pod annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
# -- The configuration of mgmt-backend
mgmtBackend:
  # -- The image of mgmt-backend
  image:
    repository: instill/mgmt-backend
    tag: 0.25.3
    pullPolicy: IfNotPresent
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    migration: mgmt-backend-migrate
    init: mgmt-backend-init
    main: mgmt-backend
    worker: mgmt-backend-worker
  # -- The path of configuration file for mgmt-backend
  configPath: /mgmt-backend/config/config.yaml
  defaultUserUID:
  instillCoreHost:
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for mgmt-backend
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init first containers
  extraInitFirstContainers: []
  # extraInitFirstContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: []
  # -- Additional pod annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  # -- The pod resource
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  # -- The configuration of Temporal
  temporal:
    hostPort:
    namespace:
    apiKey:
    insecureSkipVerify:
# -- The configuration of pipeline-backend
pipelineBackend:
  # -- The image of pipeline-backend
  image:
    repository: instill/pipeline-backend
    tag: 0.61.0
    pullPolicy: IfNotPresent
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    migration: pipeline-backend-migrate
    init: pipeline-backend-init
    main: pipeline-backend
  # -- The path of configuration file for pipeline-backend
  configPath: /pipeline-backend/config/config.yaml
  # -- workflow setting
  workflow:
    maxWorkflowTimeout: 3600 # in seconds
    maxWorkflowRetry: 3
    maxActivityRetry: 1
  useStaticModelList: false
  instillCoreHost:
  # -- The configuration of Temporal
  temporal:
    hostPort:
    namespace:
    apiKey:
    insecureSkipVerify:
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for pipeline-backend
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init first containers
  extraInitFirstContainers: []
  # extraInitFirstContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: []
  # -- Additional pod annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  minio:
    port: 9000
    user: minioadmin
    password: minioadmin
    bucketname: core-pipeline
    secure: false
# -- The configuration of pipeline-backend-worker
pipelineBackendWorker:
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    worker: pipeline-backend-worker
  # -- The path of configuration file for pipeline-backend-worker
  configPath: /pipeline-backend/config/config.yaml
  # -- The number of replica for pipeline-backend-worker
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init first containers
  extraInitFirstContainers: []
  # extraInitFirstContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: []
  # -- Additional pod annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  nodeSelector: {}
  tolerations: []
  affinity: {}
# -- The configuration of model-backend
modelBackend:
  # -- The image of model-backend
  image:
    repository: instill/model-backend
    tag: "0247eee"
    pullPolicy: IfNotPresent
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    migration: model-backend-migrate
    init: model-backend-init
    worker: model-backend-worker
    main: model-backend
    initModel: model-backend-init-model
  # -- The path of configuration file for model-backend
  configPath: /model-backend/config/config.yaml
  instillCoreHost:
  # -- The AI Task schema version
  taskSchemaVersion: 662c3e2
  # -- The configuration of Temporal
  temporal:
    hostPort:
    namespace:
    retention:
    apiKey:
    insecureSkipVerify:
    workflow:
      maxWorkflowTimeout: 3600 # in seconds
      maxWorkflowRetry: 3
      maxActivityRetry: 1
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for model-backend
  replicaCount: 1
  # -- The model initialization configuration
  initModel:
    enabled: false
    path: https://raw.githubusercontent.com/instill-ai/instill-core/main/model-hub/model_hub_test.json
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init first containers
  extraInitFirstContainers: []
  # extraInitFirstContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: []
  # -- Additional pod annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  minio:
    port: 9000
    user: minioadmin
    password: minioadmin
    bucketname: core-model
    secure: false
# -- The configuration of artifact-backend
artifactBackend:
  # -- The image of artifact-backend
  image:
    repository: instill/artifact-backend
    tag: d6dd9b4
    pullPolicy: IfNotPresent
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    migration: artifact-backend-migrate
    init: artifact-backend-init
    main: artifact-backend
  # -- The path of configuration file for artifact-backend
  configPath: /artifact-backend/config/config.yaml
  # -- The host of instill-core
  instillCoreHost:
  # -- The configuration of Temporal
  temporal:
    hostPort:
    namespace:
    apiKey:
    insecureSkipVerify:
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for artifact-backend
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init first containers
  extraInitFirstContainers: []
  # extraInitFirstContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: []
  # -- Additional pod annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  # -- The pod resource
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  minio:
    port: 9000
    user: minioadmin
    password: minioadmin
    bucketname: core-artifact
  numberOfWorkers: 20
  blob:
    hostport: http://localhost:8080
artifactBackendWorker:
  # -- Annotation for deployment
  annotations: {}
  # -- The command names to be executed
  commandName:
    worker: artifact-backend-worker
  # -- The path of configuration file for artifact-backend-worker
  configPath: /artifact-backend/config/config.yaml
  # -- The number of replica for artifact-backend-worker
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volumes
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init first containers
  extraInitFirstContainers: []
  # extraInitFirstContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Additional pod annotations
  podAnnotations: {}
  # -- The pod resource
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
# -- The configuration of console
console:
  # -- Enable console deployment or not
  enabled: true
  # -- The image of console
  image:
    repository: instill/console
    tag: 0.68.5
    pullPolicy: IfNotPresent
  # -- The accessible endpoint for the api-gateway from the console server side
  serverApiGatewayURL:
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The number of replica for console
  replicaCount: 1
  # -- Add extra env variables
  extraEnv: []
  # -- Mount external volume
  # For example, mount a secret containing Certificate root CA to verify database
  # TLS connection.
  extraVolumes: []
  # - name: my-volume
  #   secret:
  #     secretName: my-secret
  extraVolumeMounts: []
  # - name: my-volume
  #   mountPath: /etc/secrets/my-secret
  #   readOnly: true
  # -- Add extra init containers
  extraInitContainers: []
  # extraInitContainers:
  #  - name: ...
  #    image: ...
  # -- Add extra sidecar containers
  sidecarContainers: []
  # -- Additional pod annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetAverageMemoryUtilization:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
# -- The configuration of registry
registry:
  enabled: true
  image:
    repository: registry
    tag: 2.8.3
    pullPolicy: IfNotPresent
  configPath: /etc/docker/registry/config.yml
  serviceAccountName: ""
  automountServiceAccountToken: false
  replicaCount: 1
  extraEnv: []
  extraVolumes: []
  extraVolumeMounts: []
  extraInitContainers: []
  sidecarContainers: []
  podAnnotations: {}
  serviceAnnotations: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetCPUUtilizationPercentage:
    targetMemoryUtilizationPercentage:
  podDisruptionBudget:
    enabled: false
    spec:
      minAvailable:
      maxUnavailable:
  garbageCollect:
    enabled: true
    deleteUntagged: true
    schedule: "10 0 * * 1"
    maintenanceSchedule: "*/30 0 * * 1"
  config:
    version: 0.1
    log:
      level: Info
      formatter: text
      fields:
        service: registry
        environment: k8s:ce
    storage:
      type: filesystem
      filesystem:
        rootdirectory: /var/lib/registry
        maxthreads: 100
      gcs:
        bucket:
        keyfile:
        credentials:
          type:
          project_id:
          private_key_id:
          private_key:
          client_email:
          client_id:
          auth_uri:
          token_uri:
          auth_provider_x509_cert_url:
          client_x509_cert_url:
        rootdirectory:
        chunksize:
      s3:
        accesskey:
        secretkey:
        region:
        regionendpoint:
        forcepathstyle:
        accelerate:
        bucket:
        encrypt:
        keyid:
        secure:
        skipverify:
        v4auth:
        chunksize:
        storageclass:
        multipartcopychunksize:
        multipartcopymaxconcurrency:
        multipartcopythresholdsize:
        rootdirectory:
        usedualstack:
        useragent:
        objectacl:
        loglevel: debug
      delete:
        enabled: true
      redirect:
        disable: false
      cache:
        blobdescriptor: redis
        blobdescriptorsize: 10000
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
        readonly:
          enabled: false
    http:
      addr: 0.0.0.0:5000
      prefix: /
      secret: i-love-instill-ai
      relativeurls: false
      draintimeout: 60s
      tls:
        certificate:
        key:
      debug:
        addr: 0.0.0.0:5001
        prometheus:
          enabled: true
          path: /metrics
      headers:
        X-Content-Type-Options: [nosniff]
      http2:
        disabled: false
      h2c:
        enabled: false
    redis:
      addr: core-redis:6379
      dialtimeout: 100ms
      readtimeout: 100ms
      writetimeout: 100ms
      pool:
        maxidle: 16
        maxactive: 128
        idletimeout: 300s
      tls:
        enabled: false
# -- The configuration of PostgreSQL
database:
  # -- If external database is used, set "enabled" to false
  # and fill the connection information in "external" section
  enabled: true
  # -- The image of postgresql
  image:
    repository: postgres
    tag: 15-alpine
    pullPolicy: IfNotPresent
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The initial superuser password for internal database
  password: "password"
  # -- The size limit for Shared memory, pgSQL use it for shared_buffer
  shmSizeLimit: 512Mi
  # -- The pod resource
  resources: {}
  # -- The timeout used in livenessProbe; 1 to 5 seconds
  livenessProbe:
    timeoutSeconds: 1
  # -- The timeout used in readinessProbe; 1 to 5 seconds
  readinessProbe:
    timeoutSeconds: 1
  # -- Additional pod annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # -- The maximum number of connections in the idle connection pool per pod.
  # If it <=0, no idle connections are retained.
  maxIdleConns: 5
  # -- The maximum number of open connections to the database per pod.
  # If it <= 0, then there is no limit on the number of open connections.
  maxOpenConns: 10
  # -- The maximum amount of time in minutes a connection may be reused.
  # Expired connections may be closed lazily before reuse.
  # If it <= 0, connections are not closed due to a connection's age.
  maxConnLifeTime: 30m
  # -- The configuration of external database
  external:
    host:
    port:
    username:
    password:
    dbSecretName: ""
    dbSecretKey: ""
  externalReplica:
    host:
    port:
    username:
    password:
# -- The configuration of Redis
redis:
  # -- If external Redis is used, set "enabled" to false
  # and fill the connection information in "external" section
  enabled: true
  # -- The image of redis
  image:
    repository: redis
    tag: 8.0-M04-alpine3.21
    pullPolicy: IfNotPresent
  # -- Set the service account to be used, default if left empty
  serviceAccountName: ""
  # -- Mount the service account token
  automountServiceAccountToken: false
  # -- The pod resource
  resources: {}
  ## -- The priority class to run the pod as
  priorityClassName:
  # -- Additional pod annotations
  podAnnotations: {}
  # -- Additional service annotations
  serviceAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## -- The configuration of external redis
  external:
    # -- Address for redis: <host_redis>:<port_redis>
    addr:
# -- The configuration of InfluxDB
influxdb2:
  enabled: true
  # Admin user configuration
  adminUser:
    user: admin
    token: i-love-instill-ai
    organization: instill-ai
    bucket: instill-ai
    retention_policy: 1w
  # -- The configuration of external InfluxDB
  external:
    # -- The URL of the external InfluxDB
    url:
    # -- The token of the external InfluxDB
    token:
    # -- The organization of the external InfluxDB
    organization:
    # -- The bucket of the external InfluxDB
    bucket:
# ------------------------------------------------------------
# The configuration of dependent Helm charts
# ------------------------------------------------------------
# -- The configuration of OpenFGA
openfga:
  enabled: true
  # -- The image of OpenFGA
  image:
    pullPolicy: IfNotPresent
  # -- The number of replica for OpenFGA
  replicaCount: 1
  # -- OpenFGA datastore configuration
  datastore:
    engine: postgres
    uri: postgres://postgres:password@core-database:5432/openfga?sslmode=disable
  # -- OpenFGA HTTP configuration
  http:
    enabled: true
    addr: 0.0.0.0:8080
    tls:
      enabled: false
  # -- OpenFGA gRPC configuration
  grpc:
    addr: 0.0.0.0:8081
    tls:
      enabled: false
  # -- OpenFGA playground configuration
  playground:
    enabled: false
  # -- OpenFGA profiler configuration
  profiler:
    enabled: false
  # -- OpenFGA logging configuration
  log:
    level: info
    format: json
    timestampFormat: Unix
  # -- OpenFGA check query cache configuration
  checkQueryCache:
    enabled: true
  # -- OpenFGA telemetry configuration
  telemetry:
    trace:
      enabled: false
      otlp:
        endpoint: core-opentelemetry-collector:4317
        tls:
          enabled: false
    metrics:
      enabled: true
  # -- OpenFGA migrations configuration
  migrate:
    annotations:
      helm.sh/hook: "post-install, post-upgrade, post-rollback"
    extraInitContainers:
      - name: wait-for-db
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "until pg_isready; do echo waiting for db; sleep 2; done"]
        env:
          - name: PGHOST
            value: "core-database"
          - name: PGUSER
            value: "postgres"
      - name: openfga-createdb
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
          - >
            until pg_isready; do


















              echo "Waiting for database to be ready...";
              sleep 2;
            done; createdb || true

        env:
          - name: PGDATABASE
            value: "openfga"
          - name: PGHOST
            value: "core-database"
          - name: PGPORT
            value: "5432"
          - name: PGUSER
            value: "postgres"
          - name: PGPASSWORD
            value: "password"
# -- The configuration of OpenTelemetry Collector
opentelemetry-collector:
  enabled: false
  mode: deployment
  image:
    repository: "ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"
  ports:
    zipkin:
      enabled: false
    otlp-http:
      enabled: false
    otlp:
      enabled: true
      containerPort: 4317
      servicePort: 4317
    metrics:
      enabled: true
      containerPort: 9001
      servicePort: 9001
      protocol: TCP
  config:
    receivers:
      prometheus: {}
      zipkin: {}
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
    processors:
      memory_limiter:
        limit_percentage: 50
        check_interval: 1s
        spike_limit_percentage: 30
      batch:
        send_batch_size: 8192
    exporters:
      debug: {}
      otlp:
        endpoint: tempo:4317
        tls:
          insecure: true
      otlphttp/logs:
        endpoint: "http://loki:3100/otlp"
        tls:
          insecure: true
      prometheus:
        endpoint: ${env:MY_POD_IP}:9001
        namespace: instill-core
        send_timestamps: true
        enable_open_metrics: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [debug, otlp]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [debug, prometheus]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [debug, otlphttp/logs]
