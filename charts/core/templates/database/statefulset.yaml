{{- if .Values.database.enabled -}}
{{- $database := .Values.persistence.persistentVolumeClaim.database -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "core.database" . }}
  labels:
    {{- include "core.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  replicas: 1
  serviceName: "{{ template "core.database" . }}"
  selector:
    matchLabels:
      {{- include "core.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        {{- include "core.labels" . | nindent 8 }}
        app.kubernetes.io/component: database
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/database/secret.yaml") . | sha256sum }}
        {{- with .Values.database.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      # 70 is the standard uid/gid for "postgres" in Alpine
      # https://github.com/docker-library/postgres/blob/master/11/alpine/Dockerfile#L9-L15
      securityContext:
        runAsUser: 70
        runAsGroup: 70
      {{- if .Values.database.serviceAccountName }}
      serviceAccountName: {{ .Values.database.serviceAccountName }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.database.automountServiceAccountToken | default false }}
      terminationGracePeriodSeconds: 120
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: database
          image: {{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}
          imagePullPolicy: {{ .Values.database.image.pullPolicy }}
          livenessProbe:
            exec:
              command:
              - pg_isready
            periodSeconds: 10
            timeoutSeconds: {{ .Values.database.livenessProbe.timeoutSeconds }}
          readinessProbe:
            exec:
              command:
              - pg_isready
            periodSeconds: 10
            timeoutSeconds: {{ .Values.database.readinessProbe.timeoutSeconds }}
          {{- if .Values.database.resources }}
          resources:
            {{- toYaml .Values.database.resources | nindent 10 }}
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ template "core.database" . }}
          env:
            # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
          - name: data
            mountPath: /var/lib/postgresql/data
            subPath: {{ $database.subPath }}
          - name: shm-volume
            mountPath: /dev/shm
      volumes:
        - name: shm-volume
          emptyDir:
            medium: Memory
            sizeLimit: {{ .Values.database.shmSizeLimit }}
        - name: data
        {{- if not .Values.persistence.enabled }}
          emptyDir: {}
        {{- else if $database.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ $database.existingClaim }}
        {{- else }}
          persistentVolumeClaim:
            claimName: {{ template "core.databaseDataVolume" . }}
        {{- end }}
      {{- with .Values.database.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}}
