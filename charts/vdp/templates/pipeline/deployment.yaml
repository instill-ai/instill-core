apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "vdp.pipeline" . }}
  labels:
    {{- include "vdp.labels" . | nindent 4 }}
    app.kubernetes.io/component: pipeline
  annotations:
    rollme: {{ randAlphaNum 5 | quote }}
spec:
  strategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if eq .Values.updateStrategy.type "Recreate" }}
    rollingUpdate: null
    {{- end }}
  {{- if not .Values.pipeline.autoscaling.enabled }}
  replicas: {{ .Values.pipeline.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "vdp.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: pipeline
  template:
    metadata:
      labels:
        {{- include "vdp.matchLabels" . | nindent 8 }}
        app.kubernetes.io/component: pipeline
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/pipeline/configmap.yaml") . | sha256sum }}
        {{- with .Values.pipeline.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      # Distroless nonroot:nonroot is 65532:65532
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
      {{- if .Values.pipeline.serviceAccountName }}
      serviceAccountName: {{ .Values.pipeline.serviceAccountName }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.pipeline.automountServiceAccountToken | default false }}
      terminationGracePeriodSeconds: 120
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if eq .Values.database.type "internal" }}
        - name: wait-for-db
          image: {{ .Values.database.internal.image.repository }}:{{ .Values.database.internal.image.tag }}
          imagePullPolicy: {{ $.Values.database.internal.image.pullPolicy }}
          command: ['sh', '-c', "until pg_isready; do echo waiting for db; sleep 2; done"]
          env:
            - name: PGHOST
              value: {{ template "vdp.database" . }}
            - name: PGUSER
              value: {{ template "vdp.database.username" . }}
        {{- end }}
        - name: pipeline-backend-migration
          image: {{ .Values.pipeline.image.repository }}:{{ .Values.pipeline.image.tag }}
          imagePullPolicy: {{ .Values.pipeline.image.pullPolicy }}
          {{- if .Values.pipeline.resources }}
          resources:
            {{- toYaml .Values.pipeline.resources | nindent 12 }}
          {{- end }}
          command: ["./pipeline-backend-migrate"]
          volumeMounts:
            - name: config
              mountPath: /pipeline-backend/config/config.yaml
              subPath: config.yaml
        {{- with .Values.pipeline.extraInitContainers }}
        {{- toYaml . | indent 8 }}
        {{- end }}
      containers:
        - name: pipeline-backend
          image: {{ .Values.pipeline.image.repository }}:{{ .Values.pipeline.image.tag }}
          imagePullPolicy: {{ .Values.pipeline.image.pullPolicy }}
          readinessProbe:
            httpGet:
              path: /v1alpha/__readiness
              scheme: {{ ternary "https" "http" .Values.internalTLS.enabled | upper }}
              port: {{ ternary "https" "http" .Values.internalTLS.enabled }}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /v1alpha/__liveness
              scheme: {{ ternary "https" "http" .Values.internalTLS.enabled | upper }}
              port: {{ ternary "https" "http" .Values.internalTLS.enabled }}
            initialDelaySeconds: 5
            periodSeconds: 10
          {{- if .Values.pipeline.resources }}
          resources:
            {{- toYaml .Values.pipeline.resources | nindent 12 }}
          {{- end }}
          command: ["./pipeline-backend"]
          ports:
            - name: {{ ternary "https" "http" .Values.internalTLS.enabled }}
              containerPort: {{ template "vdp.pipeline.publicPort" . }}
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /pipeline-backend/config/config.yaml
              subPath: config.yaml
            {{- if .Values.internalTLS.enabled }}
            - name: pipeline-internal-certs
              mountPath: "/etc/vdp/ssl/pipeline"
            {{- end }}
            {{- with .Values.pipeline.extraVolumeMounts }}
            {{- toYaml . | indent 12 }}
            {{- end }}
          {{- if .Values.pipeline.extraEnv }}
          env:
            {{- toYaml .Values.pipeline.extraEnv | nindent 12 }}
          {{- end }}
        {{- with .Values.pipeline.sidecarContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "vdp.pipeline" . }}
        {{- if .Values.internalTLS.enabled }}
        - name: pipeline-internal-certs
          secret:
            secretName: {{ template "vdp.internalTLS.pipeline.secretName" . }}
        {{- end }}
        {{- if .Values.pipeline.extraVolumes }}
        {{- toYaml .Values.pipeline.extraVolumes | indent 6 }}
        {{- end }}
      {{- with .Values.pipeline.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.pipeline.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.pipeline.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
