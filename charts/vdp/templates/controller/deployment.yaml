apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "vdp.controller" . }}
  labels:
    {{- include "vdp.labels" . | nindent 4 }}
    app.kubernetes.io/component: controller
  annotations:
    rollme: {{ randAlphaNum 5 | quote }}
spec:
  strategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if eq .Values.updateStrategy.type "Recreate" }}
    rollingUpdate: null
    {{- end }}
  {{- if not .Values.controller.autoscaling.enabled }}
  replicas: {{ .Values.controller.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "vdp.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        {{- include "vdp.matchLabels" . | nindent 8 }}
        app.kubernetes.io/component: controller
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/controller/configmap.yaml") . | sha256sum }}
        {{- with .Values.controller.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      # Ubuntu nobody:nogroup is 65534:65534
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
      {{- if .Values.controller.serviceAccountName }}
      serviceAccountName: {{ .Values.controller.serviceAccountName }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.controller.automountServiceAccountToken | default false }}
      terminationGracePeriodSeconds: 120
      initContainers:
        - name: wait-for-dependencies
          image: curlimages/curl:8.00.1
          command: ['sh', '-c']
          args:
          - >
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${ETCD_HOST}:${ETCD_CLIENT_PORT}/health)" != "200" ]]; do echo waiting for etcd; sleep 1; done &&
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${PIPELINE_BACKEND_HOST}:${PIPELINE_BACKEND_PORT}/v1alpha/health/pipeline)" != "200" ]]; do echo waiting for pipeline-backend; sleep 1; done &&
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${CONNECTOR_BACKEND_HOST}:${CONNECTOR_BACKEND_PORT}/v1alpha/health/connector)" != "200" ]]; do echo waiting for connector-backend; sleep 1; done &&
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${MODEL_BACKEND_HOST}:${MODEL_BACKEND_PORT}/v1alpha/health/model)" != "200" ]]; do echo waiting for model-backend; sleep 1; done &&
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${MGMT_BACKEND_HOST}:${MGMT_BACKEND_PORT}/v1alpha/health/mgmt)" != "200" ]]; do echo waiting for mgmt-backend; sleep 1; done
          env:
            - name: PIPELINE_BACKEND_HOST
              value: "{{ template "vdp.pipeline" . }}"
            - name: PIPELINE_BACKEND_PORT
              value: "{{ template "vdp.pipeline.publicPort" . }}"
            - name: CONNECTOR_BACKEND_HOST
              value: "{{ template "vdp.connector" . }}"
            - name: CONNECTOR_BACKEND_PORT
              value: "{{ template "vdp.connector.publicPort" . }}"
            - name: MODEL_BACKEND_HOST
              value: "{{ template "vdp.model" . }}"
            - name: MODEL_BACKEND_PORT
              value: "{{ template "vdp.model.publicPort" . }}"
            - name: MGMT_BACKEND_HOST
              value: "{{ template "vdp.mgmt" . }}"
            - name: MGMT_BACKEND_PORT
              value: "{{ template "vdp.mgmt.publicPort" . }}"
            - name: ETCD_HOST
              value: "{{ template "vdp.etcd" . }}"
            - name: ETCD_CLIENT_PORT
              value: "{{ template "vdp.etcd.clientPort" . }}"
      containers:
        - name: controller
          image: {{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}
          imagePullPolicy: {{ .Values.controller.image.pullPolicy }}
          readinessProbe:
            httpGet:
              path: /v1alpha/__readiness
              scheme: {{ ternary "https" "http" .Values.internalTLS.enabled | upper }}
              port: {{ ternary "https" "http" .Values.internalTLS.enabled }}-private
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /v1alpha/__liveness
              scheme: {{ ternary "https" "http" .Values.internalTLS.enabled | upper }}
              port: {{ ternary "https" "http" .Values.internalTLS.enabled }}-private
            initialDelaySeconds: 5
            periodSeconds: 10
          {{- if .Values.controller.resources }}
          resources:
            {{- toYaml .Values.controller.resources | nindent 12 }}
          {{- end }}
          command: ["./controller"]
          ports:
            - name: {{ ternary "https" "http" .Values.internalTLS.enabled }}-private
              containerPort: {{ template "vdp.controller.privatePort" . }}
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /controller/config/config.yaml
              subPath: config.yaml
            {{- if .Values.internalTLS.enabled }}
            - name: controller-internal-certs
              mountPath: "/etc/vdp/ssl/controller"
            {{- end }}
            {{- with .Values.controller.extraVolumeMounts }}
            {{- toYaml . | indent 12 }}
            {{- end }}
          {{- if .Values.controller.extraEnv }}
          env:
            {{- toYaml .Values.controller.extraEnv | nindent 12 }}
          {{- end }}
        {{- with .Values.controller.sidecarContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "vdp.controller" . }}
        - name: controller-internal-certs
          secret:
            secretName: {{ template "vdp.internalTLS.controller.secretName" . }}
        {{- if .Values.controller.extraVolumes }}
        {{- toYaml .Values.controller.extraVolumes | indent 6 }}
        {{- end }}
      {{- with .Values.controller.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
