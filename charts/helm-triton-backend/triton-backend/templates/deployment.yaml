apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "triton-backend.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "triton-backend.name" . }}
    chart: {{ template "triton-backend.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    rollme: {{ randAlphaNum 5 | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "triton-backend.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "triton-backend.name" . }}
        release: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: 1000
      imagePullSecrets:
        - name: image-pull
      volumes:
      - name: triton-models-volume
        hostPath:
          # Directory location on host
          path: {{ .Values.image.modelRepositoryPath }}
          type: DirectoryOrCreate
      - name: triton-conda-pack-volume
        hostPath:
          path: {{ .Values.image.condaPackPath }}
          type: DirectoryOrCreate
      - name: dshm
        emptyDir:
          medium: Memory
          sizeLimit: "1Gi"
      initContainers:
        - name: {{ print .Chart.Name "-env" }}
          image: "{{ .Values.tritonEnv.registry }}/{{ .Values.tritonEnv.repository }}:{{ .Values.tritonEnv.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.tritonEnv.pullPolicy }}
          volumeMounts:
          - mountPath: {{ .Values.image.condaPackPath }}-env
            name: triton-conda-pack-volume
          command: ["/bin/sh"]
          args: [
            "-c",
            "cp {{ .Values.image.condaPackPath }}/{{ .Values.image.condaPackFileName }} {{ .Values.image.condaPackPath }}-env && chown -R 1000:1000 {{ .Values.image.condaPackPath }}-env"
          ]
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: triton-models-volume
            mountPath: {{ .Values.image.modelRepositoryPath }}
          - mountPath: /dev/shm
            name: dshm
          - mountPath: {{ .Values.image.condaPackPath }}
            name: triton-conda-pack-volume
          env:
          {{- if not .Values.mode.useCpu }}
          resources:
            limits:
              nvidia.com/gpu: {{ .Values.image.numGpus }}
          {{- end }}
          args: [
            "/bin/bash",
            "-c",
            "tritonserver --model-store={{ .Values.image.modelRepositoryPath }} --allow-http=true --model-control-mode=explicit --strict-model-config=false --log-verbose=1"
          ]
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 8001
              name: grpc
            - containerPort: 8002
              name: metrics
          livenessProbe:
            initialDelaySeconds: 60
            httpGet:
              path: /v2/health/live
              port: http
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 5
            httpGet:
              path: /v2/health/ready
              port: http
          securityContext:
            runAsUser: 1000
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
