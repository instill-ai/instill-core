version: "3.9"

networks:
  default:
    name: instill-network

volumes:
  model_repository:
    name: model-repository
  pg_sql:
    name: pg-sql

services:
  vdp:
    container_name: vdp
    build:
      context: .
    image: instill/vdp:latest
    restart: unless-stopped
    volumes:
      - ./configs:/vdp/configs
    depends_on:
      - temporal

  model_backend_migrate:
    container_name: model-backend-migrate
    image: instill/model:0.1.0
    restart: on-failure
    environment:
      CFG_DATABASE_VERSION: 1
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_DATABASE_HOST: pg_sql
      CFG_DATABASE_PORT: 5432
    entrypoint: ./migrate
    depends_on:
      pg_sql:
        condition: service_healthy

  model_backend:
    container_name: model-backend
    image: instill/model:0.1.0
    restart: unless-stopped
    environment:
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_DATABASE_HOST: pg_sql
      CFG_DATABASE_PORT: 5432
      CFG_SERVER_PORT: 8445
      CFG_DATABASE_VERSION: 1
      CFG_TRITONSERVER_GRPCURI: triton-server:8001
      CFG_TRITONSERVER_MODELSTORE: /model-repository
    ports:
      - 8445:8445
    volumes:
      - model_repository:/model-repository
    depends_on:
      triton_server:
        condition: service_healthy

  pipeline_backend_migrate:
    container_name: pipeline-backend-migrate
    image: instill/pipeline-backend:latest
    restart: on-failure
    environment:
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_DATABASE_HOST: pg_sql
      CFG_DATABASE_PORT: 5432
    volumes:
      - ./backends/pipeline-backend/config:/pipeline-backend/configs
    entrypoint: ./pipeline-backend-migrate
    depends_on:
      pg_sql:
        condition: service_healthy

  pipeline_backend:
    container_name: pipeline-backend
    image: instill/pipeline-backend:latest
    restart: unless-stopped
    environment:
      CFG_SERVER_PORT: 8446
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_DATABASE_HOST: pg_sql
      CFG_DATABASE_PORT: 5432
    ports:
      - 8446:8446
    volumes:
      - ./backends/pipeline-backend/config:/pipeline-backend/configs
    depends_on:
      - pipeline_backend_migrate
      - temporal
      - redis

  triton_server:
    container_name: triton-server
    image: nvcr.io/nvidia/tritonserver:21.09-py3
    restart: unless-stopped
    command: tritonserver --model-store=/model-repository --model-control-mode=explicit --allow-http=true --strict-model-config=false
    ports:
      - 8001:8001
    volumes:
      - model_repository:/model-repository
      - ./conda-pack:/conda-pack
    healthcheck:
      test: ["CMD-SHELL", "curl localhost:8000/v2/health/ready"]
      timeout: 20s
      retries: 10
    shm_size: 2gb
    ulimits:
        memlock: -1
        stack: 67108864

  pg_sql:
    container_name: pg-sql
    image: bitnami/postgresql:14.1.0
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    volumes:
      - pg_sql:/bitnami/postgresql
      - ./scripts/postgresql_healthcheck.sh:/scripts/postgresql_healthcheck.sh
    healthcheck:
      test: ["CMD", "/scripts/postgresql_healthcheck.sh"]
      interval: 15s
      timeout: 5s
      retries: 6

  cassandra:
    container_name: cassandra
    image: cassandra:3.11.11
    restart: unless-stopped
    ports:
      - 9042:9042

  temporal:
    container_name: temporal
    image: temporalio/auto-setup:1.14.2
    restart: unless-stopped
    environment:
      - CASSANDRA_SEEDS=cassandra
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    ports:
      - 7233:7233
    volumes:
      - ./backends/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    depends_on:
      - cassandra

  temporal_admin_tools:
    container_name: temporal-admin-tools
    image: temporalio/admin-tools:1.14.2
    restart: unless-stopped
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    stdin_open: true
    tty: true
    depends_on:
      - temporal

  temporal_web:
    container_name: temporal-web
    image: temporalio/web:1.13.0
    restart: unless-stopped
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    ports:
      - 8088:8088
    depends_on:
      - temporal

  redis:
    container_name: redis
    image: bitnami/redis:6.2.6-debian-10-r34
    restart: unless-stopped
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379
