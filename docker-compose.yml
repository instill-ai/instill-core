version: "3.9"

networks:
  default:
    name: instill-network
    external: true

volumes:
  vdp:
    name: vdp
  airbyte:
    name: airbyte

services:

  pipeline_backend_migrate:
    container_name: ${PIPELINE_BACKEND_HOST}-migrate
    image: ${PIPELINE_BACKEND_IMAGE}:${PIPELINE_BACKEND_VERSION}
    restart: on-failure
    environment:
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
    entrypoint: ./pipeline-backend-migrate

  pipeline_backend:
    container_name: ${PIPELINE_BACKEND_HOST}
    image: ${PIPELINE_BACKEND_IMAGE}:${PIPELINE_BACKEND_VERSION}
    restart: unless-stopped
    environment:
      CFG_SERVER_PRIVATEPORT: ${PIPELINE_BACKEND_PRIVATEPORT}
      CFG_SERVER_PUBLICPORT: ${PIPELINE_BACKEND_PUBLICPORT}
      CFG_SERVER_DEBUG: "false"
      CFG_SERVER_MAXDATASIZE: ${MAX_DATA_SIZE}
      CFG_SERVER_USAGE_ENABLED: ${USAGE_ENABLED}
      CFG_SERVER_EDITION: ${EDITION:-local-ce:unknown}
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_CONNECTORBACKEND_HOST: ${CONNECTOR_BACKEND_HOST}
      CFG_CONNECTORBACKEND_PRIVATEPORT: ${CONNECTOR_BACKEND_PRIVATEPORT}
      CFG_CONNECTORBACKEND_PUBLICPORT: ${CONNECTOR_BACKEND_PUBLICPORT}
      CFG_MGMTBACKEND_HOST: ${MGMT_BACKEND_HOST}
      CFG_MGMTBACKEND_PRIVATEPORT: ${MGMT_BACKEND_PRIVATEPORT}
      CFG_TEMPORAL_CLIENTOPTIONS_HOSTPORT: ${TEMPORAL_HOST}:${TEMPORAL_PORT}
      CFG_CACHE_REDIS_REDISOPTIONS_ADDR: ${REDIS_HOST}:${REDIS_PORT}
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    entrypoint: ./pipeline-backend
    depends_on:
      pipeline_backend_migrate:
        condition: service_completed_successfully

  pipeline_backend_worker:
    container_name: ${PIPELINE_BACKEND_HOST}-worker
    image: ${PIPELINE_BACKEND_IMAGE}:${PIPELINE_BACKEND_VERSION}
    restart: unless-stopped
    environment:
      CFG_SERVER_PRIVATEPORT: ${PIPELINE_BACKEND_PRIVATEPORT}
      CFG_SERVER_PUBLICPORT: ${PIPELINE_BACKEND_PUBLICPORT}
      CFG_SERVER_DEBUG: "false"
      CFG_SERVER_MAXDATASIZE: ${MAX_DATA_SIZE}
      CFG_SERVER_USAGE_ENABLED: ${USAGE_ENABLED}
      CFG_SERVER_EDITION: ${EDITION:-local-ce:unknown}
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_CONNECTORBACKEND_HOST: ${CONNECTOR_BACKEND_HOST}
      CFG_CONNECTORBACKEND_PRIVATEPORT: ${CONNECTOR_BACKEND_PRIVATEPORT}
      CFG_CONNECTORBACKEND_PUBLICPORT: ${CONNECTOR_BACKEND_PUBLICPORT}
      CFG_MGMTBACKEND_HOST: ${MGMT_BACKEND_HOST}
      CFG_MGMTBACKEND_PRIVATEPORT: ${MGMT_BACKEND_PRIVATEPORT}
      CFG_TEMPORAL_CLIENTOPTIONS_HOSTPORT: ${TEMPORAL_HOST}:${TEMPORAL_PORT}
      CFG_CACHE_REDIS_REDISOPTIONS_ADDR: ${REDIS_HOST}:${REDIS_PORT}
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    entrypoint: ./pipeline-backend-worker
    depends_on:
      pipeline_backend_migrate:
        condition: service_completed_successfully

  connector_backend_migrate:
    container_name: ${CONNECTOR_BACKEND_HOST}-migrate
    image: ${CONNECTOR_BACKEND_IMAGE}:${CONNECTOR_BACKEND_VERSION}
    restart: on-failure
    environment:
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
    entrypoint: ./connector-backend-migrate

  connector_backend_init:
    container_name: ${CONNECTOR_BACKEND_HOST}-init
    image: ${CONNECTOR_BACKEND_IMAGE}:${CONNECTOR_BACKEND_VERSION}
    restart: on-failure
    environment:
      DOCKER_HOST: tcp://${SOCAT_HOST}:${SOCAT_PORT}
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    entrypoint: ./connector-backend-init
    depends_on:
      connector_backend_migrate:
        condition: service_completed_successfully

  connector_backend:
    container_name: ${CONNECTOR_BACKEND_HOST}
    image: ${CONNECTOR_BACKEND_IMAGE}:${CONNECTOR_BACKEND_VERSION}
    restart: unless-stopped
    environment:
      DOCKER_HOST: tcp://${SOCAT_HOST}:${SOCAT_PORT}
      CFG_CONNECTOR_AIRBYTE_MOUNTSOURCE_VDP: vdp
      CFG_CONNECTOR_AIRBYTE_MOUNTSOURCE_AIRBYTE: airbyte
      CFG_SERVER_PRIVATEPORT: ${CONNECTOR_BACKEND_PRIVATEPORT}
      CFG_SERVER_PUBLICPORT: ${CONNECTOR_BACKEND_PUBLICPORT}
      CFG_SERVER_DEBUG: "false"
      CFG_SERVER_USAGE_ENABLED: ${USAGE_ENABLED}
      CFG_SERVER_EDITION: ${EDITION:-local-ce:unknown}
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_PIPELINEBACKEND_HOST: ${PIPELINE_BACKEND_HOST}
      CFG_PIPELINEBACKEND_PUBLICPORT: ${PIPELINE_BACKEND_PUBLICPORT}
      CFG_MGMTBACKEND_HOST: ${MGMT_BACKEND_HOST}
      CFG_MGMTBACKEND_PRIVATEPORT: ${MGMT_BACKEND_PRIVATEPORT}
      CFG_TEMPORAL_CLIENTOPTIONS_HOSTPORT: ${TEMPORAL_HOST}:${TEMPORAL_PORT}
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    entrypoint: ./connector-backend
    volumes:
      - vdp:/vdp
      - airbyte:/airbyte
    depends_on:
      connector_backend_init:
        condition: service_completed_successfully

  controller_vdp:
    container_name: ${CONTROLLER_VDP_HOST}
    image: ${CONTROLLER_VDP_IMAGE}:${CONTROLLER_VDP_VERSION}
    restart: unless-stopped
    environment:
      CFG_SERVER_DEBUG: "false"
      CFG_SERVER_EDITION: ${EDITION:-local-ce:unknown}
      CFG_DATABASE_HOST: ${POSTGRESQL_HOST}
      CFG_DATABASE_PORT: ${POSTGRESQL_PORT}
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_ETCD_PORT: ${ETCD_CLIENT_PORT}
      CFG_LOG_EXTERNAL: ${OBSERVE_ENABLED}
      CFG_LOG_OTELCOLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
    entrypoint: ./controller-vdp

  socat:
    container_name: ${SOCAT_HOST}
    image: ${SOCAT_IMAGE}:${SOCAT_VERSION}
    restart: unless-stopped
    command: tcp-listen:${SOCAT_PORT},fork,reuseaddr unix-connect:/var/run/docker.sock
    user: root
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

  temporal_admin_tools:
    container_name: ${TEMPORAL_HOST}-admin-tools
    image: ${TEMPORAL_ADMIN_TOOLS_IMAGE}:${TEMPORAL_ADMIN_TOOLS_VERSION}
    restart: on-failure
    environment:
      TEMPORAL_CLI_ADDRESS: ${TEMPORAL_HOST}:${TEMPORAL_PORT}
    entrypoint: ["/bin/bash", "-c"]
    command: |
      'if [[ ! $(tctl --namespace pipeline-backend namespace list | grep pipeline-backend) ]]; then tctl --namespace pipeline-backend namespace register; fi'
