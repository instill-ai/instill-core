version: "3.9"

networks:
  default:
    name: instill-network

volumes:
  vdp:
    name: vdp
  airbyte:
    name: airbyte
  conda_pack:
    name: conda-pack
  model_repository:
    name: model-repository

services:
  pipeline_backend_migrate:
    profiles:
      - all
      - mgmt
      - connector
      - model
      - console
    container_name: pipeline-backend-migrate
    image: instill/pipeline-backend:latest
    build:
      context: ./dev/pipeline-backend
      args:
        - SERVICE_NAME=pipeline-backend
    restart: on-failure
    environment:
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
    entrypoint: ./pipeline-backend-migrate
    depends_on:
      pg_sql:
        condition: service_healthy

  pipeline_backend:
    profiles:
      - all
      - mgmt
      - connector
      - model
      - console
    container_name: pipeline-backend
    image: instill/pipeline-backend:latest
    build:
      context: ./dev/pipeline-backend
      args:
        - SERVICE_NAME=pipeline-backend
    restart: unless-stopped
    environment:
      CFG_SERVER_PORT: 8081
      CFG_SERVER_DEBUG: "true"
      CFG_SERVER_DISABLEUSAGE: ${DISABLEUSAGE}
      CFG_SERVER_EDITION: local-ce:latest
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_MGMTBACKEND_HOST: mgmt-backend
      CFG_MGMTBACKEND_PORT: 8084
      CFG_CONNECTORBACKEND_HOST: connector-backend
      CFG_CONNECTORBACKEND_PORT: 8082
      CFG_MODELBACKEND_HOST: model-backend
      CFG_MODELBACKEND_PORT: 8083
      CFG_TEMPORAL_CLIENTOPTIONS_HOSTPORT: "temporal:7233"
      CFG_CACHE_REDIS_REDISOPTIONS_ADDR: redis:6379
      CFG_SERVER_CORSORIGINS: http://localhost:3000
    ports:
      - 8081:8081
    entrypoint: ./pipeline-backend
    depends_on:
      - pipeline_backend_migrate
      - temporal
      - redis

  connector_backend_migrate:
    profiles:
      - all
      - mgmt
      - pipeline
      - model
      - console
    container_name: connector-backend-migrate
    image: instill/connector-backend:latest
    build:
      context: ./dev/connector-backend
      args:
        - SERVICE_NAME=connector-backend
    restart: on-failure
    environment:
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
    entrypoint: ./connector-backend-migrate
    depends_on:
      pg_sql:
        condition: service_healthy

  connector_backend_init:
    profiles:
      - all
      - mgmt
      - pipeline
      - model
      - console
    container_name: connector-backend-init
    image: instill/connector-backend:latest
    build:
      context: ./dev/connector-backend
      args:
        - SERVICE_NAME=connector-backend
    restart: on-failure
    environment:
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
    entrypoint: ./connector-backend-init
    depends_on:
      - connector_backend_migrate

  connector_backend_worker:
    profiles:
      - all
      - mgmt
      - pipeline
      - model
      - console
    container_name: connector-backend-worker
    image: instill/connector-backend:latest
    build:
      context: ./dev/connector-backend
      args:
        - SERVICE_NAME=connector-backend
    restart: unless-stopped
    environment:
      CFG_WORKER_MOUNTSOURCE_VDP: vdp
      CFG_WORKER_MOUNTSOURCE_AIRBYTE: airbyte
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_TEMPORAL_CLIENTOPTIONS_HOSTPORT: temporal:7233
    volumes:
      - vdp:/vdp
      - airbyte:/airbyte
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: ./connector-backend-worker
    depends_on:
      - connector_backend_init
      - temporal

  connector_backend:
    profiles:
      - all
      - mgmt
      - pipeline
      - model
      - console
    container_name: connector-backend
    image: instill/connector-backend:latest
    build:
      context: ./dev/connector-backend
      args:
        - SERVICE_NAME=connector-backend
    restart: unless-stopped
    environment:
      CFG_SERVER_PORT: 8082
      CFG_SERVER_DEBUG: "true"
      CFG_SERVER_DISABLEUSAGE: ${DISABLEUSAGE}
      CFG_SERVER_EDITION: local-ce:latest
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_MGMTBACKEND_HOST: mgmt-backend
      CFG_MGMTBACKEND_PORT: 8084
      CFG_PIPELINEBACKEND_HOST: pipeline-backend
      CFG_PIPELINEBACKEND_PORT: 8081
      CFG_TEMPORAL_CLIENTOPTIONS_HOSTPORT: temporal:7233
      CFG_SERVER_CORSORIGINS: http://localhost:3000
    ports:
      - 8082:8082
    entrypoint: ./connector-backend
    depends_on:
      - connector_backend_worker

  model_backend_migrate:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - console
    container_name: model-backend-migrate
    image: instill/model-backend:latest
    build:
      context: ./dev/model-backend
      args:
        - SERVICE_NAME=model-backend
    restart: on-failure
    environment:
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
    entrypoint: ./model-backend-migrate
    depends_on:
      pg_sql:
        condition: service_healthy

  model_backend_init:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - console
    container_name: model-backend-init
    image: instill/model-backend:latest
    build:
      context: ./dev/model-backend
      args:
        - SERVICE_NAME=model-backend
    restart: on-failure
    environment:
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
    entrypoint: ./model-backend-init
    depends_on:
      - model_backend_migrate

  model_backend:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - console
    container_name: model-backend
    image: instill/model-backend:latest
    build:
      context: ./dev/model-backend
      args:
        - SERVICE_NAME=model-backend
    restart: unless-stopped
    environment:
      CFG_SERVER_PORT: 8083
      CFG_SERVER_DEBUG: "true"
      CFG_SERVER_DISABLEUSAGE: ${DISABLEUSAGE}
      CFG_SERVER_EDITION: local-ce:latest
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_MGMTBACKEND_HOST: mgmt-backend
      CFG_MGMTBACKEND_PORT: 8084
      CFG_PIPELINEBACKEND_HOST: pipeline-backend
      CFG_PIPELINEBACKEND_PORT: 8081
      CFG_TRITONSERVER_GRPCURI: triton-server:8001
      CFG_TEMPORAL_CLIENTOPTIONS_HOSTPORT: temporal:7233
      CFG_CACHE_REDIS_REDISOPTIONS_ADDR: redis:6379
      CFG_TRITONSERVER_MODELSTORE: /model-repository
      CFG_SERVER_CORSORIGINS: http://localhost:3000
    ports:
      - 8083:8083
    volumes:
      - model_repository:/model-repository
    entrypoint: ./model-backend
    depends_on:
      triton_server:
        condition: service_healthy
      model_backend_init:
        condition: service_completed_successfully

  mgmt_backend_migrate:
    profiles:
      - all
      - pipeline
      - connector
      - model
      - console
    container_name: mgmt-backend-migrate
    image: instill/mgmt-backend:latest
    build:
      context: ./dev/mgmt-backend
      args:
        - SERVICE_NAME=mgmt-backend
    restart: on-failure
    environment:
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
    entrypoint: ./mgmt-backend-migrate
    depends_on:
      pg_sql:
        condition: service_healthy

  mgmt_backend_init:
    profiles:
      - all
      - pipeline
      - connector
      - model
      - console
    container_name: mgmt-backend-init
    image: instill/mgmt-backend:latest
    build:
      context: ./dev/mgmt-backend
      args:
        - SERVICE_NAME=mgmt-backend
    restart: on-failure
    environment:
      CFG_SERVER_PORT: 8084
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
    entrypoint: ./mgmt-backend-init
    depends_on:
      - mgmt_backend_migrate

  mgmt_backend:
    profiles:
      - all
      - pipeline
      - connector
      - model
      - console
    container_name: mgmt-backend
    image: instill/mgmt-backend:latest
    build:
      context: ./dev/mgmt-backend
      args:
        - SERVICE_NAME=mgmt-backend
    restart: unless-stopped
    environment:
      CFG_SERVER_PORT: 8084
      CFG_SERVER_DEBUG: "true"
      CFG_SERVER_DISABLEUSAGE: ${DISABLEUSAGE}
      CFG_SERVER_EDITION: local-ce:latest
      CFG_DATABASE_HOST: pg-sql
      CFG_DATABASE_PORT: 5432
      CFG_DATABASE_USERNAME: postgres
      CFG_DATABASE_PASSWORD: password
      CFG_SERVER_CORSORIGINS: http://localhost:3000
    ports:
      - 8084:8084
    entrypoint: ./mgmt-backend
    depends_on:
      - mgmt_backend_init

  triton_conda_env:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - model
      - console
    container_name: triton-conda-env
    image: ${TRITONCONDAENV_IMAGE_TAG}
    volumes:
      - conda_pack:/conda-pack

  triton_server:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - model
      - console
    container_name: triton-server
    image: ${TRITONSERVER_IMAGE_TAG}
    restart: unless-stopped
    environment:
      NVIDIA_VISIBLE_DEVICES: 0
    command: tritonserver --model-store=/model-repository --model-control-mode=explicit --allow-http=true --strict-model-config=false --log-verbose=1
    ports:
      - 8001:8001
    volumes:
      - model_repository:/model-repository
      - conda_pack:/conda-pack
    healthcheck:
      test: ["CMD-SHELL", "curl localhost:8000/v2/health/ready"]
      timeout: 20s
      retries: 10
    shm_size: 2gb
    ulimits:
        memlock: -1
        stack: 67108864
    depends_on:
      - triton_conda_env

  pg_sql:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - model
      - console
    container_name: pg-sql
    image: postgres:${POSTGRESQL_VERSION}-alpine
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      timeout: 20s
      retries: 10

  temporal:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - model
      - console
    container_name: temporal
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    restart: unless-stopped
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=password
      - POSTGRES_SEEDS=pg-sql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    ports:
      - 7233:7233
    depends_on:
      pg_sql:
        condition: service_healthy

  temporal_admin_tools:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - model
      - console
    container_name: temporal-admin-tools
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    restart: unless-stopped
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    stdin_open: true
    tty: true
    depends_on:
      - temporal

  temporal_ui:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - model
      - console
    container_name: temporal-ui
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    restart: unless-stopped
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
    ports:
      - 8088:8080
    depends_on:
      - temporal

  redis:
    profiles:
      - all
      - mgmt
      - pipeline
      - connector
      - model
      - console
    container_name: redis
    image: ${REDIS_IMAGE_TAG}
    restart: unless-stopped
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379

  redoc_openapi:
    container_name: redoc-openapi
    image: redocly/redoc:v2.0.0-rc.70
    environment:
      - SPEC_URL=https://raw.githubusercontent.com/instill-ai/protobufs/main/openapiv2/openapiv2.swagger.yaml
    ports:
      - 3001:80

  console:
    profiles:
      - all
    container_name: console
    image: instill/console:latest
    build:
      context: ./dev/console
    restart: unless-stopped
    environment:
      - API_VERSION=v1alpha
      - DISABLE_USAGE_COLLECTION=false
      - CONSOLE_DOMAIN=localhost
      - PIPELINE_BACKEND_BASE_URL=http://localhost:8081
      - CONNECTOR_BACKEND_BASE_URL=http://localhost:8082
      - MODEL_BACKEND_BASE_URL=http://localhost:8083
      - MGMT_BACKEND_BASE_URL=http://localhost:8084
    ports:
      - 3000:3000
    depends_on:
      - mgmt_backend
      - connector_backend
      - model_backend
      - pipeline_backend
