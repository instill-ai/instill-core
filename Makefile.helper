# Helper functions for common make targets

# Function to ensure user_uid exists
define ENSURE_USER_UID
	@if [ ! -f "$$(echo ${SYSTEM_CONFIG_PATH}/user_uid)" ]; then \
		mkdir -p ${SYSTEM_CONFIG_PATH} && \
		uuidgen > ${SYSTEM_CONFIG_PATH}/user_uid; \
	fi
endef

# Function to get common compose parameters
define GET_COMPOSE_PARAMS
	$(if $(filter true,$(CI)),EDITION=docker-ce:test,EDITION=$${EDITION:=local-ce}) \
	DEFAULT_USER_UID=$$(cat ${SYSTEM_CONFIG_PATH}/user_uid) \
	$(if $(filter true,$(CI)),ENV_SECRETS_COMPONENT=${ENV_SECRETS_COMPONENT_TEST},ENV_SECRETS_COMPONENT=${ENV_SECRETS_COMPONENT})
endef

# Function to launch docker compose with GPU support
define COMPOSE_GPU
	@cat docker-compose-nvidia.yml | yq '.services.ray.deploy.resources.reservations.devices[0].device_ids |= (strenv(NVIDIA_VISIBLE_DEVICES) | split(",")) | ..style="double"' | \
		$(1) docker compose $(2) -f - up -d
endef

# Function to launch docker compose without GPU support
define COMPOSE_CPU
	@$(1) docker compose $(2) up -d
endef

# Function to launch Helm chart
define HELM
	@echo "Add Helm repositories"
	@helm repo add minio https://operator.min.io
	@helm repo add kuberay https://ray-project.github.io/kuberay-helm
	@helm repo add influxdata https://helm.influxdata.com
	@helm repo add milvus-operator https://zilliztech.github.io/milvus-operator
	@helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
	@echo "Update Helm dependencies"
	@cd charts/core && helm dependency update
	@echo "Install MinIO in single-tenant mode"
	@helm install --namespace ${MINIO_KUBERNETES_NAMESPACE} --create-namespace operator minio/operator --version ${MINIO_OPERATOR_HELM_CHART_VERSION} --values configs/helm/minio/operator.values.yaml
	@helm install --namespace ${MINIO_KUBERNETES_NAMESPACE} --create-namespace tenant minio/tenant --version ${MINIO_OPERATOR_HELM_CHART_VERSION} --values configs/helm/minio/tenant.values.yaml
	@echo "Install Milvus in standalone mode"
	@helm install --namespace ${MILVUS_KUBERNETES_NAMESPACE} --create-namespace milvus-operator milvus-operator/milvus-operator --version ${MILVUS_OPERATOR_HELM_CHART_VERSION} --values configs/helm/milvus/values.yaml
	@kubectl apply --namespace ${MILVUS_KUBERNETES_NAMESPACE} -f configs/helm/milvus/secret.yaml
	@kubectl apply --namespace ${MILVUS_KUBERNETES_NAMESPACE} -f configs/helm/milvus/standalone.yaml
	@echo "Install Instill Core Helm chart"
	@helm install ${HELM_RELEASE_NAME} charts/core \
		--namespace ${HELM_NAMESPACE} --create-namespace \
		--set edition=$(if $(filter true,$(1)),k8s-ce:test,k8s-ce) \
		--set tags.observability=$(OBSERVE_ENABLED) \
		--set pipelineBackend.instillCoreHost=http://${INSTILL_CORE_HOST}:${API_GATEWAY_PORT} \
		--set artifactBackend.instillCoreHost=http://${INSTILL_CORE_HOST}:${API_GATEWAY_PORT} \
		--set modelBackend.instillCoreHost=http://${INSTILL_CORE_HOST}:${API_GATEWAY_PORT} \
		--set mgmtBackend.instillCoreHost=http://${INSTILL_CORE_HOST}:${API_GATEWAY_PORT} \
		$(if $(filter true,$(1)),--set ray-cluster.head.autoscaling.enableInTreeAutoscaling=false,) \
		$(if $(filter true,$(1)),--set ray-cluster.head.resources.requests.cpu=0,) \
		$(if $(filter true,$(1)),--set ray-cluster.head.resources.requests.memory=0,) \
		$(if $(filter true,$(1)),--set ray-cluster.worker.resources.requests.cpu=0,) \
		$(if $(filter true,$(1)),--set ray-cluster.worker.resources.requests.memory=0,) \
		$(if $(filter true,$(1)),--set opentelemetry-collector.enabled=false,) \
		$(if $(filter true,$(1)),--set kube-prometheus-stack.enabled=false,) \
		$(if $(filter true,$(1)),--set 'pipelineBackend.extraEnv[0].name=CFG_COMPONENT_SECRETS_GITHUB_OAUTHCLIENTID',) \
		$(if $(filter true,$(1)),--set 'pipelineBackend.extraEnv[0].value=foo',) \
		$(if $(filter true,$(1)),--set 'pipelineBackend.extraEnv[1].name=CFG_COMPONENT_SECRETS_GITHUB_OAUTHCLIENTSECRET',) \
		$(if $(filter true,$(1)),--set 'pipelineBackend.extraEnv[1].value=foo',) \
		--timeout 30m0s
endef

# Function to build dev image
define BUILD_DEV
	@bash -c ' \
		set -e; \
		trap "$(MAKE) down" ERR INT TERM && \
		docker build --progress plain \
			--build-arg ALPINE_VERSION=${ALPINE_VERSION} \
			--build-arg K6_VERSION=${K6_VERSION} \
			--build-arg XK6_VERSION=${XK6_VERSION} \
			--build-arg XK6_SQL_VERSION=${XK6_SQL_VERSION} \
			--build-arg XK6_SQL_POSTGRES_VERSION=${XK6_SQL_POSTGRES_VERSION} \
			--build-arg CACHE_DATE="$(shell date)" \
			--build-arg API_GATEWAY_VERSION=${API_GATEWAY_VERSION} \
			--build-arg PIPELINE_BACKEND_VERSION=${PIPELINE_BACKEND_VERSION} \
			--build-arg ARTIFACT_BACKEND_VERSION=${ARTIFACT_BACKEND_VERSION} \
			--build-arg MODEL_BACKEND_VERSION=${MODEL_BACKEND_VERSION} \
			--build-arg MGMT_BACKEND_VERSION=${MGMT_BACKEND_VERSION} \
			--build-arg CONSOLE_VERSION=${CONSOLE_VERSION} \
			-t ${INSTILL_CORE_IMAGE_NAME}:${GIT_COMMIT_SHA} . \
	'
endef

# Function to remove containers
define REMOVE_CONTAINERS
	@docker rm -f ${CONTAINER_COMPOSE_INTEGRATION_TEST_NAME}:${GIT_COMMIT_SHA} >/dev/null 2>&1
	@docker rm -f ${CONTAINER_COMPOSE_INTEGRATION_TEST_NAME}-helm:${GIT_COMMIT_SHA} >/dev/null 2>&1
endef

# Function to cleanup helm release
define REMOVE_HELM_RESOURCES
	@if helm list --namespace ${MINIO_KUBERNETES_NAMESPACE} 2>/dev/null | grep -q "operator" 2>/dev/null; then \
		helm uninstall operator --namespace ${MINIO_KUBERNETES_NAMESPACE}; \
		helm uninstall tenant --namespace ${MINIO_KUBERNETES_NAMESPACE}; \
		kubectl delete namespace ${MINIO_KUBERNETES_NAMESPACE}; \
	fi
	@if helm list --namespace ${MILVUS_KUBERNETES_NAMESPACE} 2>/dev/null | grep -q "milvus-operator" 2>/dev/null; then \
		kubectl delete milvus milvus -n milvus >/dev/null 2>&1; \
		helm uninstall milvus-operator --namespace ${MILVUS_KUBERNETES_NAMESPACE}; \
		kubectl delete namespace ${MILVUS_KUBERNETES_NAMESPACE}; \
	fi
	@# Remove Helm release
	@if helm list --namespace ${HELM_NAMESPACE} 2>/dev/null | grep -q "${HELM_RELEASE_NAME}" 2>/dev/null; then \
		helm uninstall ${HELM_RELEASE_NAME} --namespace ${HELM_NAMESPACE}; \
		kubectl delete namespace ${HELM_NAMESPACE}; \
		ps aux | grep "[k]ubectl port-forward" | awk '{print $$2}' | xargs -r kill -9 2>/dev/null || true; \
	fi
endef

# Function to run backend integration test
define COMPOSE_INTEGRATION_TEST
	@$(MAKE) compose-run EDITION=docker-ce:test ENV_SECRETS_COMPONENT=${ENV_SECRETS_COMPONENT_TEST}
	@docker run --rm \
		--network ${COMPOSE_NETWORK_NAME} \
		--name ${CONTAINER_COMPOSE_INTEGRATION_TEST_NAME}-${GIT_COMMIT_SHA} \
		${INSTILL_CORE_IMAGE_NAME}:${GIT_COMMIT_SHA} /bin/sh -c " \
			/bin/sh -c 'cd mgmt-backend && make integration-test API_GATEWAY_URL=${API_GATEWAY_HOST}:${API_GATEWAY_PORT}' && \
			/bin/sh -c 'cd pipeline-backend && make integration-test API_GATEWAY_URL=${API_GATEWAY_HOST}:${API_GATEWAY_PORT} DB_HOST=pg-sql' && \
			/bin/sh -c 'cd model-backend && make integration-test API_GATEWAY_URL=${API_GATEWAY_HOST}:${API_GATEWAY_PORT}' \
		"
	@$(MAKE) down
endef

# Function to run Helm backend integration test
define HELM_INTEGRATION_TEST
	@$(MAKE) helm-run CI=true
	@bash -c 'while [[ "$$(kubectl get pods --namespace ${HELM_NAMESPACE} -l app.kubernetes.io/component=api-gateway,app.kubernetes.io/instance=core -o jsonpath={..status.phase})" != *"Running"* ]]; do \
		echo "$$(kubectl get pods --namespace ${HELM_NAMESPACE})"; \
		sleep 10; \
	done; \
	echo "$$(kubectl get pods --namespace ${HELM_NAMESPACE})"'
	@kubectl --namespace ${HELM_NAMESPACE} port-forward $$(kubectl get pods --namespace ${HELM_NAMESPACE} -l "app.kubernetes.io/component=api-gateway,app.kubernetes.io/instance=core" -o jsonpath="{.items[0].metadata.name}") ${API_GATEWAY_PORT}:${API_GATEWAY_PORT} > /dev/null 2>&1 &
	@kubectl --namespace ${HELM_NAMESPACE} port-forward $$(kubectl get pods --namespace ${HELM_NAMESPACE} -l "app.kubernetes.io/component=database,app.kubernetes.io/instance=core" -o jsonpath="{.items[0].metadata.name}") ${POSTGRESQL_PORT}:${POSTGRESQL_PORT} > /dev/null 2>&1 &
	@echo "Waiting for port-forwarding to be ready..."
	@timeout=120; \
		while ! nc -z localhost ${API_GATEWAY_PORT} >/dev/null 2>&1 || ! nc -z localhost ${POSTGRESQL_PORT} >/dev/null 2>&1; do \
			if [ $$timeout -le 0 ]; then \
				echo "Timeout waiting for port-forwarding"; \
				exit 1; \
			fi; \
			sleep 1; \
			timeout=$$((timeout-1)); \
		done;
	@echo "Port-forwarding is ready"
	@if [ "$(UNAME_S)" = "Darwin" ]; then \
		docker run --rm --name ${CONTAINER_COMPOSE_INTEGRATION_TEST_NAME}-helm-${GIT_COMMIT_SHA} ${INSTILL_CORE_IMAGE_NAME}:${GIT_COMMIT_SHA} /bin/sh -c " \
			/bin/sh -c 'cd mgmt-backend && make integration-test API_GATEWAY_URL=host.docker.internal:${API_GATEWAY_PORT}' && \
			/bin/sh -c 'cd pipeline-backend && make integration-test API_GATEWAY_URL=host.docker.internal:${API_GATEWAY_PORT} DB_HOST=host.docker.internal' && \
			/bin/sh -c 'cd model-backend && make integration-test API_GATEWAY_URL=host.docker.internal:${API_GATEWAY_PORT}' \
		"; \
	else \
		docker run --rm --network host --name ${CONTAINER_COMPOSE_INTEGRATION_TEST_NAME}-helm-${GIT_COMMIT_SHA} ${INSTILL_CORE_IMAGE_NAME}:${GIT_COMMIT_SHA} /bin/sh -c " \
			/bin/sh -c 'cd mgmt-backend && make integration-test API_GATEWAY_URL=localhost:${API_GATEWAY_PORT}' && \
			/bin/sh -c 'cd pipeline-backend && make integration-test API_GATEWAY_URL=localhost:${API_GATEWAY_PORT}' && \
			/bin/sh -c 'cd model-backend && make integration-test API_GATEWAY_URL=localhost:${API_GATEWAY_PORT}' \
		"; \
	fi
	@$(MAKE) down
endef

# Function to run model deployment integration test
define MODEL_INTEGRATION_TEST
	@EDITION=docker-ce:test docker compose up registry -d
	@$(MAKE) build-and-push-models
	@$(MAKE) compose-run EDITION=docker-ce:test INITMODEL_ENABLED=true INITMODEL_INVENTORY=${PWD}/integration-test/models/inventory.json
	@$(MAKE) wait-models-deploy
	@$(MAKE) down
endef
